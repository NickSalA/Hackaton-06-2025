model AccessLog {
  id         String   @id @default(cuid())
  userId     String
  courseId   String
  accessedAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId, accessedAt])
}
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// ========= MODELOS DE AUTH.JS =========
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  progresses    Progress[]
  chatSessions  ChatSession[]
  accessLogs    AccessLog[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id                 String   @id @default(cuid())
  sessionToken       String   @unique
  userId             String
  expires            DateTime
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// ========= MODELOS DEL CHAT =========
model ChatSession {
  id        String    @id @default(cuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  lessonId  String
  lesson    Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  title     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  messages  Message[]

  @@index([userId, createdAt])
  @@index([lessonId])
}

model Message {
  id            String      @id @default(cuid())
  chatSessionId String
  role          MessageRole
  content       String
  meta          Json?
  createdAt     DateTime    @default(now())
  chatSession   ChatSession @relation(fields: [chatSessionId], references: [id], onDelete: Cascade)

  @@index([chatSessionId, createdAt])
}


model Course {
  id        String   @id @default(cuid())
  slug      String   @unique
  title     String
  summary   String?
  lessons   Lesson[]
  accessLogs AccessLog[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Lesson {
  infoPanel String? // Markdown para el panel lateral
  chatWelcomeMessage String? // Mensaje inicial personalizado del chat
  id        String   @id @default(cuid())
  courseId  String
  slug      String   @unique
  title     String
  description String?
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  course    Course   @relation(fields: [courseId], references: [id])
  progresses Progress[]
  chatSessions ChatSession[]
}

model Progress {
  id          String   @id @default(cuid())
  userId      String
  lessonId    String
  status      ProgressStatus @default(IN_PROGRESS)
  completedAt DateTime?

  user   User   @relation(fields: [userId], references: [id])
  lesson Lesson @relation(fields: [lessonId], references: [id])

  @@unique([userId, lessonId])
}

enum ProgressStatus {
  IN_PROGRESS
  COMPLETED
}

model playing_with_neon {
  id    Int    @id @default(autoincrement())
  name  String
  value Float? @db.Real
}

enum MessageRole {
  user
  assistant
  system
}
